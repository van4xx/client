import React, { useState, useEffect } from 'react';
import './QuestRoom.css';
import { 
  BsArrowLeft, 
  BsLightbulb, 
  BsClock, 
  BsHeart, 
  BsStar,
  BsChatDots,
  BsEmojiSmile,
  BsTrophy,
  BsLightningCharge,
  BsCoin,
  BsGift,
  BsPersonBadge,
  BsBarChart,
  BsArrowRepeat
} from 'react-icons/bs';

function QuestRoom({ onBack, partner, quest, userLevel, completedQuests, onContinueChat, onStartNewQuest }) {
  const [currentStage, setCurrentStage] = useState(null);
  const [timeLeft, setTimeLeft] = useState(900); // 15 –º–∏–Ω—É—Ç
  const [hints, setHints] = useState(3);
  const [showChat, setShowChat] = useState(false);
  const [compatibility, setCompatibility] = useState({ total: 0, traits: {} });
  const [messages, setMessages] = useState([]);
  const [choices, setChoices] = useState([]);
  const [showResults, setShowResults] = useState(false);
  const [questRewards, setQuestRewards] = useState(null);
  const [personalityAnalysis, setPersonalityAnalysis] = useState([]);
  const [showReactionPanel, setShowReactionPanel] = useState(false);
  const [partnerStatus, setPartnerStatus] = useState('thinking');
  const [questProgress, setQuestProgress] = useState({ percent: 0, stagesLeft: 0, totalStages: 0 });
  const [activeControl, setActiveControl] = useState(null);

  // –≠–º–æ—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
  const reactions = [
    { emoji: 'üòä', name: 'smile' },
    { emoji: 'üòç', name: 'love' },
    { emoji: 'ü§î', name: 'thinking' },
    { emoji: 'üòÆ', name: 'surprised' },
    { emoji: 'üëè', name: 'applause' },
    { emoji: '‚ù§Ô∏è', name: 'heart' }
  ];

  useEffect(() => {
    if (quest) {
      setCurrentStage(quest.stages[0]);
      setQuestProgress({
        percent: 0,
        stagesLeft: quest.stages.length,
        totalStages: quest.stages.length
      });
    }
  }, [quest]);

  useEffect(() => {
    const timer = setInterval(() => {
      if (timeLeft > 0) {
        setTimeLeft(prev => prev - 1);
      }
    }, 1000);

    return () => clearInterval(timer);
  }, [timeLeft]);

  const handleOptionSelect = (option) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    const newChoice = {
      stageId: currentStage.id,
      optionId: option.id,
      timestamp: new Date()
    };
    setChoices(prev => [...prev, newChoice]);

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    setPartnerStatus('thinking');
    setTimeout(() => {
      setPartnerStatus('chose');
      // –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      sendMessage('partner', `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä! ${option.explanation}`);
    }, 2000);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    const newCompatibility = calculateCompatibility([...choices, newChoice]);
    setCompatibility(newCompatibility);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    const nextStageId = option.leads_to;
    const nextStage = quest.stages.find(stage => stage.id === nextStageId);

    if (nextStage) {
      setTimeout(() => {
        setCurrentStage(nextStage);
        updateProgress(nextStage.id);
      }, 1000);
    } else {
      // –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
      const rewards = calculateRewards(newCompatibility);
      setQuestRewards(rewards);
      const analysis = analyzePersonality(newCompatibility.traits);
      setPersonalityAnalysis(analysis);
      setShowResults(true);
    }
  };

  const calculateCompatibility = (currentChoices) => {
    return {
      total: Math.min(100, compatibility.total + 5),
      traits: {
        ...compatibility.traits,
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–µ—Ä—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
      }
    };
  };

  const calculateRewards = (finalCompatibility) => {
    const baseRewards = {
      coins: quest.rewards.coins,
      experience: quest.rewards.experience,
      special: quest.rewards.special
    };

    // –ë–æ–Ω—É—Å—ã –∑–∞ –≤—ã—Å–æ–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    if (finalCompatibility.total >= 90) {
      baseRewards.coins *= 1.5;
      baseRewards.experience *= 1.5;
    } else if (finalCompatibility.total >= 70) {
      baseRewards.coins *= 1.3;
      baseRewards.experience *= 1.3;
    }

    return baseRewards;
  };

  const analyzePersonality = (traits) => {
    // –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–æ–≤
    return Object.entries(traits)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 3)
      .map(([trait, value]) => ({
        trait,
        value: Math.round(value * 10),
        description: getTraitDescription(trait)
      }));
  };

  const getTraitDescription = (trait) => {
    const descriptions = {
      brave: '–°–º–µ–ª–æ—Å—Ç—å –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π',
      romantic: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ç—É—Ä–∞',
      analytical: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
      // ... –¥—Ä—É–≥–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    };
    return descriptions[trait] || '';
  };

  const useHint = () => {
    if (hints > 0) {
      setHints(prev => prev - 1);
      sendMessage('system', currentStage.hint);
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–¥—Å–∫–∞–∑–∫–∏
      const hintElement = document.querySelector('.scene-description');
      hintElement.classList.add('hint-highlight');
      setTimeout(() => hintElement.classList.remove('hint-highlight'), 1000);
    }
  };

  const sendMessage = (sender, text) => {
    const newMessage = {
      id: Date.now(),
      text,
      sender,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const sendReaction = (reaction) => {
    sendMessage('user', reaction.emoji);
    setShowReactionPanel(false);
  };

  const updateProgress = (stageId) => {
    const progress = {
      percent: Math.round((stageId / quest.stages.length) * 100),
      stagesLeft: quest.stages.length - stageId,
      totalStages: quest.stages.length
    };
    setQuestProgress(progress);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleContinueChat = () => {
    if (onContinueChat) {
      onContinueChat(partner);
    }
    onBack();
  };

  const handleStartNewQuest = () => {
    if (onStartNewQuest) {
      onStartNewQuest(partner);
    }
    onBack();
  };

  const toggleChat = () => {
    setShowChat(!showChat);
    setActiveControl(showChat ? null : 'chat');
    setShowReactionPanel(false);
  };

  const toggleReactionPanel = () => {
    setShowReactionPanel(!showReactionPanel);
    setActiveControl(showReactionPanel ? null : 'reaction');
    setShowChat(false);
  };

  return (
    <div className="quest-room">
      <div className="quest-header">
        <button className="back-button" onClick={onBack}>
          <BsArrowLeft /> –í—ã—Ö–æ–¥
        </button>
        <div className="quest-info">
          <h2>{quest?.title}</h2>
          <div className="quest-stats">
            <div className="stat-item">
              <BsClock />
              <span>{formatTime(timeLeft)}</span>
            </div>
            <div className="stat-item">
              <BsLightbulb />
              <span>{hints} –ø–æ–¥—Å–∫–∞–∑–∫–∏</span>
            </div>
            <div className="stat-item">
              <BsHeart />
              <span>{compatibility.total}% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</span>
            </div>
            <div className="stat-item progress">
              <BsBarChart />
              <span>{questProgress.percent}% –ø—Ä–æ–π–¥–µ–Ω–æ</span>
            </div>
          </div>
        </div>
      </div>

      <div className="quest-content">
        <div className="quest-scene" style={{ backgroundImage: `url(${currentStage?.background})` }}>
          <div className="scene-description">
            {currentStage?.description}
          </div>
          <div className="scene-options">
            {currentStage?.options.map(option => (
              <button
                key={option.id}
                className="quest-option"
                onClick={() => handleOptionSelect(option)}
              >
                {option.text}
              </button>
            ))}
          </div>
        </div>

        <div className="quest-partner">
          <div className="partner-info">
            <div className="partner-photo-container">
              <img src={partner?.photo} alt={partner?.name} className="partner-photo" />
              <div className={`partner-status ${partnerStatus}`}>
                {partnerStatus === 'thinking' && 'ü§î'}
                {partnerStatus === 'chose' && '‚ú®'}
              </div>
            </div>
            <div className="partner-details">
              <h3>{partner?.name}</h3>
              <span className="status-text">
                {partnerStatus === 'thinking' ? '–î—É–º–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º...' : '–°–¥–µ–ª–∞–ª(–∞) –≤—ã–±–æ—Ä!'}
              </span>
              <div className="partner-stats">
                <div className="partner-stat">
                  <span className="partner-stat-label">
                    <BsHeart /> –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                  </span>
                  <span className="partner-stat-value">{compatibility.total}%</span>
                </div>
                <div className="partner-stat">
                  <span className="partner-stat-label">
                    <BsBarChart /> –ü—Ä–æ–≥—Ä–µ—Å—Å
                  </span>
                  <span className="partner-stat-value">{questProgress.percent}%</span>
                </div>
                <div className="partner-stat">
                  <span className="partner-stat-label">
                    <BsClock /> –í—Ä–µ–º—è –≤ –∫–≤–µ—Å—Ç–µ
                  </span>
                  <span className="partner-stat-value">{formatTime(900 - timeLeft)}</span>
                </div>
                <div className="partner-stat">
                  <span className="partner-stat-label">
                    <BsLightningCharge /> –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                  </span>
                  <span className="partner-stat-value">–í—ã—Å–æ–∫–∞—è</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="quest-controls">
        <button 
          className={`control-button hint ${hints === 0 ? 'disabled' : ''}`} 
          onClick={useHint} 
          disabled={hints === 0}
        >
          <BsLightbulb />
          <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞ ({hints})</span>
        </button>
        <button 
          className={`control-button chat ${activeControl === 'chat' ? 'active' : ''}`} 
          onClick={toggleChat}
        >
          <BsChatDots />
          <span>–ß–∞—Ç {messages.length > 0 && `(${messages.length})`}</span>
        </button>
        <button 
          className={`control-button emoji ${activeControl === 'reaction' ? 'active' : ''}`} 
          onClick={toggleReactionPanel}
        >
          <BsEmojiSmile />
          <span>–†–µ–∞–∫—Ü–∏—è</span>
        </button>
      </div>

      {showReactionPanel && (
        <div className="reaction-panel">
          {reactions.map(reaction => (
            <button
              key={reaction.name}
              className="reaction-button"
              onClick={() => sendReaction(reaction)}
            >
              {reaction.emoji}
            </button>
          ))}
        </div>
      )}

      {showChat && (
        <div className="quest-chat">
          <div className="chat-messages">
            {messages.map(message => (
              <div key={message.id} className={`chat-message ${message.sender}`}>
                <div className="message-content">{message.text}</div>
                <div className="message-time">
                  {new Date(message.timestamp).toLocaleTimeString()}
                </div>
              </div>
            ))}
          </div>
          <div className="chat-input">
            <input
              type="text"
              placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              onKeyPress={(e) => {
                if (e.key === 'Enter' && e.target.value.trim()) {
                  sendMessage('user', e.target.value);
                  e.target.value = '';
                }
              }}
            />
          </div>
        </div>
      )}

      {showResults && (
        <div className="quest-complete">
          <div className="complete-content">
            <BsTrophy className="complete-icon" />
            <h2>–ö–≤–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!</h2>
            
            <div className="complete-stats">
              <div className="stat-item">
                <BsLightningCharge />
                <span>–í—Ä–µ–º—è: {formatTime(900 - timeLeft)}</span>
              </div>
              <div className="stat-item">
                <BsHeart />
                <span>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibility.total}%</span>
              </div>
            </div>

            <div className="rewards-section">
              <h3><BsGift /> –ù–∞–≥—Ä–∞–¥—ã</h3>
              <div className="rewards-grid">
                <div className="reward-item">
                  <BsCoin />
                  <span>{questRewards.coins} –º–æ–Ω–µ—Ç</span>
                </div>
                <div className="reward-item">
                  <BsStar />
                  <span>{questRewards.experience} –æ–ø—ã—Ç–∞</span>
                </div>
                {questRewards.special && (
                  <div className="reward-item special">
                    <BsPersonBadge />
                    <span>{questRewards.special}</span>
                  </div>
                )}
              </div>
            </div>

            <div className="personality-section">
              <h3><BsBarChart /> –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</h3>
              <div className="personality-traits">
                {personalityAnalysis.map((trait, index) => (
                  <div key={index} className="trait-item">
                    <div className="trait-header">
                      <span className="trait-name">{trait.trait}</span>
                      <span className="trait-value">{trait.value}%</span>
                    </div>
                    <div className="trait-bar">
                      <div 
                        className="trait-progress" 
                        style={{ width: `${trait.value}%` }}
                      />
                    </div>
                    <p className="trait-description">{trait.description}</p>
                  </div>
                ))}
              </div>
            </div>

            <div className="complete-actions">
              <button className="action-button primary" onClick={handleContinueChat}>
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ
              </button>
              <button className="action-button secondary" onClick={handleStartNewQuest}>
                <BsArrowRepeat /> –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default QuestRoom; 
